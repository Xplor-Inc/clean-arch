@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims;

@inject IConfigurationRoot config
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="row">
    <div class="col-md-4 offset-md-4">
        <div class="row form">
            <div class="col-12"></div>
            <div class="col-12">
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <h3>Login form</h3>
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="UserName" aria-required="true" placeholder="UserId" />
                            <label for="email" class="form-label">Email</label>
                            <ValidationMessage For="() => Input.UserName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control"  placeholder="Password" />
                            <label for="password" class="form-label">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                        </div>
                        <div class="text-end">@config.GetSection("Version").Value</div>
                    </EditForm>
                </section>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoginUser();
        await base.OnInitializedAsync();
    }

    private AuthenticationProperties GetProperties()
    {
        return new AuthenticationProperties
            {
                AllowRefresh    = true,
                IssuedUtc       = DateTimeOffset.Now.ToIst(),
                ExpiresUtc      = DateTimeOffset.Now.ToIst().AddMinutes(30),
                IsPersistent    = false
            };
    }
    public async Task LoginUser()
    {
        if (Input.UserName != "UserId" || Input.Password != "Password@123")
        {
            errorMessage = "Invalid creds...";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Email, Input.UserName),
            new Claim(ClaimTypes.Name,  "Admin"),
            new Claim(ClaimTypes.Sid,  "1"),
        };
        var userPrincipal = new ClaimsPrincipal(new ClaimsIdentity(claims, "CA"));
        var properties = GetProperties();
        await HttpContext.SignInAsync("CA", userPrincipal, properties);
        if (ReturnUrl is null) ReturnUrl = "/equitymarket";
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "UserId";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "Password@123";
    }
}
