@page "/"


@using Blazorise;
@using Blazorise.Components;
@using ShareMarket.Core.Utilities


<PageTitle>Option Trading</PageTitle>
<Loader IsLoading=IsLoading />

<div class="form">
    <div class="heading flex">
        <span>
            Option Trading
        </span>
        <div class="flex">
            @if (Tradings.Count > 0)
            {
                <span class="bg-tags bg-white scheme text-warning">
                    BR : @Tradings.Sum(s => s.Brokerage).ToCString(0) (@((Tradings.Sum(s => s.Brokerage) / Tradings.Sum(s => s.GetBuyAmount()) * 100).ToFixed())%)
                </span>
                <span class="bg-tags bg-white scheme ms-1" style="color:@(Tradings.Sum(s => s.NetPL) > 0 ? "green" : "red")">
                    P/L : @Tradings.Sum(s => s.NetPL).ToCString(0) (@((Tradings.Sum(s => s.NetPL) / Tradings.Max(s => s.GetBuyAmount()) * 100).ToFixed())%)
                </span>
                <span class="bg-tags scheme ms-1" style="color:greenyellow">@Days.Count days Trading</span>
            }
            <Icon role="button" title="Add More Positions" Name="IconName.PlusCircle" Class="ms-2" Style="color:white;font-size:2rem; padding-top:0.1rem" @onclick="()=>TradeModel= new OptionTradingDto()" />
        </div>
    </div>

    <div class="flex bg-blue w-auto justify-content-start">
        <div class="flex justify-content-start bg-white m-1 p-1" style="border-radius:5px;">
            <Strong>Sources: &nbsp;</Strong>
            <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(Filters.ActiveRef == null ? "bg-blue":"")"
                  @onclick="()=>LoadData(null, Filters.ActiveIndex, Filters.ContractType)">All</span>
            @foreach (var item in References)
            {
                <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(item == Filters.ActiveRef ? "bg-blue":"")"
                      @onclick="()=>LoadData(item ,Filters.ActiveIndex, Filters.ContractType)">@item</span>
            }
        </div>
        <div class="flex justify-content-start bg-white m-1 p-1" style="border-radius:5px;">
            <Strong>Script:&nbsp;</Strong>
            <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(Filters.ActiveRef == null ? "bg-blue":"")"
                  @onclick="()=>LoadData(Filters.ActiveRef, null, Filters.ContractType)">All</span>
            @foreach (var item in Indexes)
            {
                <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(item == Filters.ActiveIndex ? "bg-blue":"")"
                      @onclick="()=>LoadData(Filters.ActiveRef, item, Filters.ContractType)">@item</span>
            }
        </div>
        <div class="flex justify-content-start bg-white m-1 p-1" style="border-radius:5px;">
            <Strong>Contract Type:&nbsp;</Strong>
            <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(Filters.ContractType == null ? "bg-blue":"")"
                  @onclick="()=>LoadData(Filters.ActiveRef, null, null)">All</span>
            <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(Filters.ContractType == TradeType.Options ? "bg-blue":"")"
                  @onclick="()=>LoadData(Filters.ActiveRef, null, TradeType.Options)">Options</span>
            <span role="button" class="ps-2 pe-2 me-2 w-auto bg-tags d-inline @(Filters.ContractType == TradeType.Future ? "bg-blue":"")"
                  @onclick="()=>LoadData(Filters.ActiveRef, null, TradeType.Future)">Future</span>
        </div>
    </div>

    <div class="flex">
        @foreach (var item in MonthWiseTrades)
        {
            <div class="col-md-2">
                <div class="bankFilter h-auto" style="background-color:#1f4963">
                    <div class="h4 flex">
                        <div class="text-start ps-2">@item.BuyDate.ToString("MMM-yyyy")</div>
                        <div class="circle-text">@item.StrickPrice</div>
                    </div>
                    <div class="h6 flex">
                        <div class="text-start ps-1">P/L</div>
                        <div class="text-end pe-2" style="color:@(item.NetPL > 0 ? "greenyellow" : "red")">@item.NetPL.ToCString(0) (@((item.NetPL / item.PL * 100).ToFixed())%)</div>
                    </div>
                    <div class="h6 flex">
                        <div class="text-start ps-1">Brokrage</div>
                        <div class="text-end pe-2 text-warning">@item.Brokerage.ToCString(0)</div>
                    </div>
                    <div class="flex">
                        <div class="text-start ps-1">Success Ratio</div>
                        <div class="text-end pe-2">@item.Index</div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (IsLoading)
    {
        <div class="text-warning p-2 m-2">
            Fetching records... Please wait..
        </div>
    }

    @if (Days.Count == 0 && !IsLoading)
    {
        <div class="alert-danger p-2 m-2">
            There is no data for selected filter...
        </div>
    }

    @if (Tradings.Any(x => x.Analysis is null))
    {
        <div class="border-box">
            <div class="heading">
                @Tradings.Where(x => x.OpenPosition > 0).Count() Open Positions
            </div>
        </div>
    }
    @for (int i = 0; i < Days.Count; i++)
    {
        var day = Days[i];
        var visible = day == Filters.ActiveDay;
        var trades = Tradings.FindAll(g => g.BuyDate == day);

        <Accordion>
            <AccordionItem @bind-Visible="visible">
                <AccordionHeader Class="p-0 m-0 bg-blue">
                    <Heading AlternativeTagName="div" Class="mb-0">
                        <AccordionToggle Clicked="()=>ToggleAccordian(day)" Class="@(day == Filters.ActiveDay ? "p-2 accordion-button ":"p-2 accordion-button collapsed")">
                            @day.ToString("ddd, dd-MMM-yy")
                            <span style="position:absolute; right:35px; color:@(trades.Sum(s => s.NetPL) > 0 ? "greenyellow" : "red")">
                                @trades.Sum(s => s.NetPL) (@((trades.Sum(s => s.NetPL) / trades.Sum(s => s.GetBuyAmount()) * 100).ToFixed())%)
                                <span class="text-white">
                                    [@trades.Count Trades]
                                </span>
                            </span>
                        </AccordionToggle>
                    </Heading>
                </AccordionHeader>
                <AccordionBody>
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead>
                                <tr>
                                    <th>Contract</th>
                                    <th>Sell Date</th>
                                    <th>Quantity</th>
                                    <th>Ref</th>
                                    <th>Buy Rate</th>
                                    <th>Sell Rate</th>
                                    <th>Sell Action</th>
                                    <th>With SL</th>
                                    <th>Returns</th>
                                    <th>Brokerage</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int t = 0; t < trades.Count; t++)
                                {
                                    var row = trades[t];
                                    <tr>
                                        <td class="analysis">
                                            @row.Index @row.ExpireDate.ToString("dd MMM") @row.StrickPrice @row.OptionType
                                            @if (!string.IsNullOrEmpty(row.Analysis))
                                            {
                                                <span class="tooltiptext">@row.Analysis</span>
                                            }
                                        </td>
                                        <td>@row.SellDate?.ToString("dd MMM")</td>
                                        <td>@row.Quantity</td>
                                        <td>@row.Ref</td>
                                        <td>@row.BuyRate.ToCString()</td>
                                        <td>@row.SellRate.ToCString()</td>
                                        <td>@row.SellAction</td>
                                        <td> <span class="bg-tags" style="width:45px; background-color:@(row.HasSL ? "green":"red")">@(row.HasSL ? "Yes" : "No")</span> </td>
                                        <th style="color:@RowColor(row)">
                                            @row.NetPL.ToCString(0)
                                          @*   (@((row.NetPL / row.GetBuyAmount() * 100).ToFixed())%) *@
                                        </th>
                                        <td>@row.Brokerage.ToCString()</td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </AccordionBody>
            </AccordionItem>
        </Accordion>
    }
</div>

